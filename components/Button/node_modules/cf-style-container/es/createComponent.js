function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import { extractPassThroughProps, resolvePassThrough } from 'fela-utils';
import { createElement } from 'react';
import PropTypes from 'prop-types';

function createComponentFactory(createElement, contextTypes) {
  return function createComponent(rule, type, passThroughProps) {
    var componentName = typeof type === 'string' ? type : type.displayName || type.name || '';

    var FelaComponent = function FelaComponent(_ref, _ref2) {
      var renderer = _ref2.renderer,
          theme = _ref2.theme;

      var children = _ref.children,
          ruleProps = _objectWithoutProperties(_ref, ['children']);

      if (!renderer) {
        throw new Error("createComponent() can't render styles without the renderer in the context. Wrap the root of your app with <StyleProvider />.");
      }

      if (!theme) {
        throw new Error("createComponent() can't render styles without the theme in the context. Wrap the root of your app with <StyleProvider />.");
      }

      // compose passThrough props from arrays or functions
      var resolvedPassThrough = [].concat(_toConsumableArray(resolvePassThrough(passThroughProps, ruleProps)));

      if (ruleProps.className) {
        console.warn('You cannot restyle Fela component ' + componentName);
      }

      var componentProps = extractPassThroughProps(resolvedPassThrough, ruleProps);

      ruleProps.theme = theme || {};

      if (ruleProps.style) {
        componentProps.style = ruleProps.style;
      }

      componentProps.className = renderer.renderRule(rule, ruleProps);

      if (ruleProps.id) {
        componentProps.id = ruleProps.id;
      }

      if (ruleProps.innerRef) {
        componentProps.ref = ruleProps.innerRef;
      }

      var customType = ruleProps.is || type;

      return createElement(customType, componentProps, children);
    };

    if (type.propTypes) {
      FelaComponent.propTypes = type.propTypes;
      FelaComponent.propTypes.className = PropTypes.string;
    }

    if (contextTypes) {
      FelaComponent.contextTypes = contextTypes;
    }

    // use the rule name as display name to better debug with react inspector
    FelaComponent.displayName = componentName + 'FelaWrapper';
    FelaComponent._isFelaComponent = true;

    return FelaComponent;
  };
}

export default createComponentFactory(createElement, {
  renderer: PropTypes.object,
  theme: PropTypes.object
});