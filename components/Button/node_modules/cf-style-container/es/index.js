var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { combineRules } from 'fela';
import { ThemeProvider, connect } from 'react-fela';
import { static as Immutable } from 'seamless-immutable';
import { capitalize } from 'underscore.string';
import createFelaComponent from './createComponent';

var createComponent = function createComponent(rule) {
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'div';
  var passThroughProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  return createFelaComponent(rule, type, type.propTypes ? passThroughProps.concat(Object.keys(type.propTypes)) : passThroughProps);
};

var mergeThemes = function mergeThemes(baseTheme) {
  for (var _len = arguments.length, themes = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    themes[_key - 1] = arguments[_key];
  }

  return {
    theme: themes && themes.reduce(function (acc, theme) {
      if (typeof theme === 'function') {
        return Immutable.merge(acc, Immutable(theme(baseTheme)), {
          deep: true
        });
      } else if ((typeof theme === 'undefined' ? 'undefined' : _typeof(theme)) === 'object') {
        return Immutable.merge(acc, Immutable(theme), { deep: true });
      }
      throw new Error('theme must be either a function or an object');
    }, Immutable(baseTheme)) || Immutable(baseTheme)
  };
};

var applyTheme = function applyTheme(ComponentToWrap) {
  for (var _len2 = arguments.length, themes = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    themes[_key2 - 1] = arguments[_key2];
  }

  var ThemedComponent = function (_Component) {
    _inherits(ThemedComponent, _Component);

    function ThemedComponent() {
      _classCallCheck(this, ThemedComponent);

      return _possibleConstructorReturn(this, (ThemedComponent.__proto__ || Object.getPrototypeOf(ThemedComponent)).apply(this, arguments));
    }

    _createClass(ThemedComponent, [{
      key: 'getChildContext',
      value: function getChildContext() {
        var contextTheme = this.context.theme || {};
        return mergeThemes.apply(undefined, [contextTheme].concat(themes));
      }
    }, {
      key: 'render',
      value: function render() {
        return React.createElement(ComponentToWrap, this.props);
      }
    }]);

    return ThemedComponent;
  }(Component);

  ThemedComponent.displayName = 'Themed' + ComponentToWrap.displayName;
  ThemedComponent.childContextTypes = { theme: PropTypes.object };
  ThemedComponent.contextTypes = { theme: PropTypes.object };
  return ThemedComponent;
};

var withTheme = function withTheme(ComponentToWrap) {
  var WithThemeComponent = function (_Component2) {
    _inherits(WithThemeComponent, _Component2);

    function WithThemeComponent() {
      _classCallCheck(this, WithThemeComponent);

      return _possibleConstructorReturn(this, (WithThemeComponent.__proto__ || Object.getPrototypeOf(WithThemeComponent)).apply(this, arguments));
    }

    _createClass(WithThemeComponent, [{
      key: 'render',
      value: function render() {
        return React.createElement(ComponentToWrap, _extends({ theme: this.context.theme }, this.props));
      }
    }]);

    return WithThemeComponent;
  }(Component);

  WithThemeComponent.displayName = 'WithTheme' + ComponentToWrap.displayName;
  WithThemeComponent.contextTypes = { theme: PropTypes.object };
  return WithThemeComponent;
};

var withRenderer = function withRenderer(ComponentToWrap) {
  var WithRendererComponent = function (_Component3) {
    _inherits(WithRendererComponent, _Component3);

    function WithRendererComponent() {
      _classCallCheck(this, WithRendererComponent);

      return _possibleConstructorReturn(this, (WithRendererComponent.__proto__ || Object.getPrototypeOf(WithRendererComponent)).apply(this, arguments));
    }

    _createClass(WithRendererComponent, [{
      key: 'render',
      value: function render() {
        return React.createElement(ComponentToWrap, _extends({ renderer: this.context.renderer }, this.props));
      }
    }]);

    return WithRendererComponent;
  }(Component);

  WithRendererComponent.displayName = 'WithRenderer' + ComponentToWrap.displayName;
  WithRendererComponent.contextTypes = { renderer: PropTypes.object };
  return WithRendererComponent;
};

var createComponentStyles = function createComponentStyles(styleFunctions, component) {
  return connect(styleFunctions)(component);
};

export { createComponent, mergeThemes, applyTheme, ThemeProvider, connect, combineRules, createComponentStyles, capitalize, withTheme, withRenderer };

// Loops the key-value pairs of a props object, and apply a filter function to
// every pair. The returned value from the filter function will be reduced back
// to a single object.
export var filterProps = function filterProps(props, filter) {
  return Object.keys(props).map(function (key) {
    return [key, props[key]];
  }).reduce(function (accum, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];

    return filter(key, value, accum);
  }, {});
};

// Filter out all the keys with null or undefined values
export var filterNone = function filterNone(props) {
  return filterProps(props, function (key, value, accum) {
    if (value == null) return accum;
    accum[key] = value;
    return accum;
  });
};

// Filter out all the style attribute from the props
export var filterStyle = function filterStyle(props) {
  return filterProps(props, function (key, value, accum) {
    if (key === 'style') return accum;
    accum[key] = value;
    return accum;
  });
};

export var mapChildren = function mapChildren(children, func) {
  return React.Children.toArray(children).map(function (child, index, children) {
    return func(child, index, children);
  });
};