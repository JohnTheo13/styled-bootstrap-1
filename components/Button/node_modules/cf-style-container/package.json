{
  "_args": [
    [
      {
        "raw": "cf-style-container@^4.1.0",
        "scope": null,
        "escapedName": "cf-style-container",
        "name": "cf-style-container",
        "rawSpec": "^4.1.0",
        "spec": ">=4.1.0 <5.0.0",
        "type": "range"
      },
      "/Users/esoj/Proyectos/styled-bootstrap/components/Button"
    ]
  ],
  "_from": "cf-style-container@>=4.1.0 <5.0.0",
  "_id": "cf-style-container@4.1.0",
  "_inCache": true,
  "_location": "/cf-style-container",
  "_nodeVersion": "7.7.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/cf-style-container-4.1.0.tgz_1499883847987_0.34238160494714975"
  },
  "_npmUser": {
    "name": "miksu",
    "email": "vojtech@miksu.cz"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cf-style-container@^4.1.0",
    "scope": null,
    "escapedName": "cf-style-container",
    "name": "cf-style-container",
    "rawSpec": "^4.1.0",
    "spec": ">=4.1.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/cf-style-container/-/cf-style-container-4.1.0.tgz",
  "_shasum": "82b43934bc86e86c11684d0ce5210937810c0f8e",
  "_shrinkwrap": null,
  "_spec": "cf-style-container@^4.1.0",
  "_where": "/Users/esoj/Proyectos/styled-bootstrap/components/Button",
  "author": {
    "name": "Vojtech Miksu",
    "email": "vojtech@cloudflare.com"
  },
  "dependencies": {
    "fela": "^5.0.0",
    "fela-utils": "^5.0.2",
    "prop-types": "^15.5.8",
    "react-fela": "^5.0.0",
    "seamless-immutable": "^7.1.2",
    "underscore.string": "^3.3.4"
  },
  "description": "Cloudflare Style Container",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "82b43934bc86e86c11684d0ce5210937810c0f8e",
    "tarball": "https://registry.npmjs.org/cf-style-container/-/cf-style-container-4.1.0.tgz"
  },
  "jsnext:main": "es/index.js",
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "handrews",
      "email": "henry@cloudflare.com"
    },
    {
      "name": "manatarms",
      "email": "fernandes.sachin@gmail.com"
    },
    {
      "name": "cf-ci",
      "email": "npm-readonly@cloudflare.com"
    },
    {
      "name": "jparyani-cloudflare",
      "email": "jparyani@cloudflare.com"
    },
    {
      "name": "ryan0x44",
      "email": "npmjs@ryan0x44.com"
    },
    {
      "name": "johndotawesome",
      "email": "jrf0110@gmail.com"
    },
    {
      "name": "sejoker",
      "email": "sejoker@gmail.com"
    },
    {
      "name": "hturan",
      "email": "harley@hturan.com"
    },
    {
      "name": "thellimist",
      "email": "mufuyil@gmail.com"
    },
    {
      "name": "koddsson",
      "email": "koddsson@gmail.com"
    },
    {
      "name": "wyuenho",
      "email": "wyuenho@gmail.com"
    },
    {
      "name": "marksteyn",
      "email": "mark@cloudflare.com"
    },
    {
      "name": "jculvey",
      "email": "jculveyhouse@gmail.com"
    },
    {
      "name": "jwineman",
      "email": "john.wineman@gmail.com"
    },
    {
      "name": "nkcmr",
      "email": "nick@comer.io"
    },
    {
      "name": "miksu",
      "email": "vojtech@miksu.cz"
    },
    {
      "name": "toekneestuck",
      "email": "toekneestuck@gmail.com"
    },
    {
      "name": "terinjokes",
      "email": "terinjokes@gmail.com"
    }
  ],
  "module": "es/index.js",
  "name": "cf-style-container",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14.9 || ^15.0.0-0 || ^16.0.0-0"
  },
  "publishConfig": {
    "registry": "http://registry.npmjs.org/"
  },
  "readme": "# cf-style-container\n\n> Cloudflare Style Container\n\nSet of high order components and other helpers for fela based applications.\n\n## Installation\n\n```sh\n$ npm install cf-style-container\n```\n\n### Aliased functions from fela and react-fela\n\nWe proxy/alias some useful functions from fela without changing their behaviour. See the original documentation for more details. We wrap all Fela APIs so we can eventually switch Fela to a different CSS in JS lib if ever needed.\n\n- [combineRules](https://github.com/rofrischmann/fela/blob/master/docs/api/fela/combineRules.md)\n- [connect](https://github.com/rofrischmann/fela/blob/master/packages/react-fela/docs/connect.md)\n- [ThemeProvider](https://github.com/rofrischmann/fela/blob/master/packages/react-fela/docs/ThemeProvider.md)\n\n### createComponent(rule, [type])\n\nVery similar to [createComponent](https://github.com/rofrischmann/fela/blob/master/packages/react-fela/docs/createComponent.md) from react-fela. However, it automatically adds PropTypes from `[type]` in case that it is a React Component.\n\nYou should use this HOC every time when you want to use Fela in your component. **This is a primary way how to style React components**.\n\n```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { createComponent } from 'cf-style-container';\n\nconst styles = ({ theme, size }) => ({\n  fontWeight: theme[`fontWeight${size}`],\n  fontSize: theme[`fontSize${size}`],\n  lineHeight: theme[`lineHeight${size}`],\n  marginTop: theme[`marginTop${size}`]\n});\n\nconst Heading = ({ size, className, children }) => {\n  const tagName = 'h' + size;\n  return React.createElement(tagName, { className }, children);\n};\n\nHeading.propTypes = {\n  size: PropTypes.oneOf([1, 2, 3, 4, 5, 6]).isRequired,\n  className: PropTypes.string.isRequired,\n  children: PropTypes.node\n};\n\nexport default createComponent(styles, Heading);\n```\n\n### createComponentStyles(rules, Component)\n\nUseful when you need multiple classNames (and rules) in one component.\n\n```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { createComponentStyles } from 'cf-style-container';\n\nconst mainStyles = ({ theme }) => ({\n  margin: theme.main.margin,\n  padding: theme.main.padding,\n});\n\nconst legendStyles = ({ theme }) => ({\n  padding: theme.legend.padding,\n  marginBottom: theme.legend.marginBottom,\n  borderBottom: theme.legend.borderBottom,\n});\n\nconst FormFieldset = ({ legend, styles }) => (\n  <fieldset className={styles.mainStyles}>\n    <legend className={styles.legendStyles}>\n      {legend}\n    </legend>\n  </fieldset>\n);\n\nFormFieldset.propTypes = {\n  styles: PropTypes.object.isRequired,\n  legend: PropTypes.string.isRequired\n};\n\nexport default createComponentStyles({ mainStyles, legendStyles }, FormFieldset);\n```\n\nNotice that rules are now an object. The names you chose will be used for classNames\naccessible as `styles.mainStyles` and `styles.legendStyles` in this case.\n\n### applyTheme(Component, ...themes)\n\nA HOC that ties a Fela component with the theme (adds the theme to its\ncontext). The themes can be functions that takes a baseTheme and returns a new\ntheme, or just an object.\n\n```jsx\nimport HeadingUnstyled from './Heading';\nimport HeadingTheme from './HeadingTheme';\n\nimport { applyTheme } from 'cf-style-container';\n\n// overrides HeadingTheme fontWeight1\nconst CustomTheme = () => { fontWeight1: 600 };\n\nconst Heading = applyTheme(HeadingUnstyled, HeadingTheme, CustomTheme);\n\n// themed component\n<Heading />\n```\n\n### withTheme(Component)\n\nA HOC that passes the current theme from context into the prop `theme`. This is useful\nwhen you need to access the theme without using `createComponent`. In other words,\nyou can't create a new styled component with it.\n\n```jsx\nimport { withTheme } from 'cf-style-container';\n\nconst MyComponent = ({ theme }) => <div>Color: {theme.colors.hail}</div> \n\nexport default withTheme(MyComponent);\n```\n\n### withRenderer(Component)\n\nA HOC that passes the renderer from context into the prop `renderer`. This is useful\nfor third party integration when you need to generate a class name and you can't create\na new styled component with it.\n\n```jsx\nimport { withRenderer } from 'cf-style-container';\n\nconst MyComponent = ({ theme }) => {\n  const styles = props => ({\n    fontSize: props.fontSize,\n    color: 'red'\n  });\n  const className = renderer.renderRule(styles, { fontSize: 12 })\n  return (<div>Class name: {className}</div>);\n} \n\nexport default withRenderer(MyComponent);\n```\n\n## mergeTheme(baseTheme, ...themes)\n\n`applyTheme()` calls this method internally to merge all themes. The returned\nvalue is a `seamless-immutable` object. It has a `theme` key that contains the\nmerged themes, thus it is suitable for passing down to style functions. The\ntypes of baseTheme and themes are the same as `applyTheme()`'s.\n\n```jsx\nimport { variables } from 'cf-style-const';\nimport { TableUnstyled, TableTheme } from 'cf-component-table';\n\nimport { applyTheme, mergeTheme } from 'cf-style-container';\n\n// You can save this theme and pass it around, you can also apply it to a component.\nconst MyTableTheme = mergeTheme(variables, TableTheme, {color: 'blue'});\n...\nconst MyTable = applyTheme(TableUnstyled, MyTableTheme);\n```\n\n\n## mapChildren(children, callback)\n\nConvenient function that wraps `React.Children`. This function differs from\n`React.Children.map()` in that the children list is turned into an array first,\nand the callback is invoked as `callback(child, index, children)`. The\ncallback's result value is then mapped to the returned array of `mapChildren`.\n\n```javascript\nclass TableRow extends React.Component {\n  render() {\n    <tr>\n      {mapChildren(this.props.children, (child, index) =>\n         React.cloneElement(child, {key: index}))}\n    </tr>\n  }\n}\n```\n\n## filterProps(obj, filter)\n## filterNone(obj)\n## filterStyle(obj)\n\n`filterStyle()` filters out the `style` entry from the object. Used to blacklist\nthe `style` props from propagating to underlying `react-dom` element when\nspreading props.\n\n`filterNone()` filters out all the entries in the object that have `undefined`\nvalues. This function is useful to make the style objects mergeable and\ncomposable, as any key with `undefined` value will overwrite the previous object\nof the same key. This is often not the desired result.\n\n`filterProps()` is the underlying machinary that all other filter function are\nimplemented with. It's essentially a reduce on the list of pairs of enumerable\nobject properties and their keys. The `filter(key, value, accum)` callback will\nbe invoked with the current key, value and accumulated value for each\npair. Useful to blacklist object keys.\n\nAll filter functions are composible.\n\n```javascript\nimport { filterNone, filterProps } from 'cf-style-container';\n\nfilterNone(\n  filterProps({\n    border: undefined,\n    color: 'blue',\n    border: '1px solid black'\n  }, (key, value, accum) => {\n    if (key === 'border') return accum;\n    else accum[key] = value;\n    return accum;\n  })\n);\n\n// Returns\n\n// {color: 'blue'}\n```\n",
  "readmeFilename": "README.md",
  "scripts": {},
  "version": "4.1.0"
}
